B+Tree

1.查询速度快，因为减少了磁盘IO次数
2.只有叶节点存放数据，其余节点用来索引，而B-Tree的每个索引节点会存放Data数据
3.B+Tree所有的Data域在叶子节点，并且所有叶子节点直接都有链指针，遍历叶子节点即可获得数据

数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入

B树，B+树：它们特点是一样的，是多路查找树，一般用于数据库系统中，为什么，因为它们分支多层数少呗，都知道磁盘IO是非常耗时的，而像大量数据存储在磁盘中所以我们要有效的减少磁盘IO次数避免磁盘频繁的查找。
B+树是B树的变种树，有n棵子树的节点中含有n个关键字，每个关键字不保存数据，只用来索引，数据都保存在叶子节点。是为文件系统而生的。

Spring

两个核心概念：
1.ioc控制反转：
将“对象--对象”的依赖模式，转换为“对象--容器--对象”的依赖模式。将对象比作成齿轮，那么容器就
2.aop面向切面编程

为什么要使用Spring：
Spring提供一个容器/工厂，统一管理模块的定义，根据需要创建。
把模块的配置参数统一管理，模块不需要自行读取配置。
Spring提供依赖注入，把依赖的模块自动推送进来，不需要模块自己拉取。
此外，Spring提供了对很多其他第三方框架的集成功能，减少了样板代码（boilerplate）

作者：飒飒面对疾风吧
链接：https://zhuanlan.zhihu.com/p/67066409
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


SpringBoot:
作者：java技术爱好者
链接：https://zhuanlan.zhihu.com/p/295451397
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

//创建计时器
    StopWatch stopWatch = new StopWatch();
    //开始计时
    stopWatch.start();
    //定义上下文对象
    ConfigurableApplicationContext context = null;
    Collection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();
    //Headless模式设置
    configureHeadlessProperty();
    //加载SpringApplicationRunListeners监听器
    SpringApplicationRunListeners listeners = getRunListeners(args);
    //发送ApplicationStartingEvent事件
    listeners.starting();
    try {
        //封装ApplicationArguments对象
        ApplicationArguments applicationArguments = new DefaultApplicationArguments(args);
        //配置环境模块
        ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);
        //根据环境信息配置要忽略的bean信息
        configureIgnoreBeanInfo(environment);
        //打印Banner标志
        Banner printedBanner = printBanner(environment);
        //创建ApplicationContext应用上下文
        context = createApplicationContext();
        //加载SpringBootExceptionReporter
        exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,
                                                         new Class[] { ConfigurableApplicationContext.class }, context);
        //ApplicationContext基本属性配置
        prepareContext(context, environment, listeners, applicationArguments, printedBanner);
        //刷新上下文
        refreshContext(context);
        //刷新后的操作，由子类去扩展
        afterRefresh(context, applicationArguments);
        //计时结束
        stopWatch.stop();
        //打印日志
        if (this.logStartupInfo) {
            new StartupInfoLogger(this.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);
        }
        //发送ApplicationStartedEvent事件，标志spring容器已经刷新，此时所有的bean实例都已经加载完毕
        listeners.started(context);
        //查找容器中注册有CommandLineRunner或者ApplicationRunner的bean，遍历并执行run方法
        callRunners(context, applicationArguments);
    }
    catch (Throwable ex) {
        //发送ApplicationFailedEvent事件，标志SpringBoot启动失败
        handleRunFailure(context, ex, exceptionReporters, listeners);
        throw new IllegalStateException(ex);
    }

    try {
        //发送ApplicationReadyEvent事件，标志SpringApplication已经正在运行，即已经成功启动，可以接收服务请求。
        listeners.running(context);
    }
    catch (Throwable ex) {
        //报告异常，但是不发送任何事件
        handleRunFailure(context, ex, exceptionReporters, null);
        throw new IllegalStateException(ex);
    }
    return context;
}

Springmvc:
1、用户发送请求到核心控制器（DispatcherServlet）
2、核心控制器根据请求路径通过处理器映射器找到对应的方法（也就是对应的RequestMapping）
3、处理器适配器执行找到的方法，处理业务，返回视图（ModelAndView）
4、通过视图解析器处理返回的视图，返回真正的视图对象
5、对视图页面进行渲染，渲染后响应给用户这是大致的简单通俗的流程，具体了解更深还得去看源码

wxdeab2afd6b7afe64
f3d919541aa6c3005acebd077f014388


